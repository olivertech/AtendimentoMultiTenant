// <auto-generated />
using System;
using AtendimentoMultiTenant.Infra.ManagementArea.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AtendimentoMultiTenant.Infra.Migrations
{
    [DbContext(typeof(ManagementAreaDbContext))]
    [Migration("20240730050412_Init_DbConfig")]
    partial class Init_DbConfig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.ContainerDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ContainerDbImage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("container_db_image");

                    b.Property<string>("ContainerDbName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("container_db_name");

                    b.Property<string>("ContainerDbNetwork")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("container_db_network");

                    b.Property<string>("ContainerDbPort")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("container_db_port");

                    b.Property<string>("ContainerDbVolume")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("container_db_volume");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<TimeOnly?>("DeactivatedTimedAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("deactivated_timed_at");

                    b.Property<DateOnly?>("DeativatedAt")
                        .HasColumnType("date")
                        .HasColumnName("deactivated_at");

                    b.Property<string>("EnvironmentDbName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("environment_db_name");

                    b.Property<string>("EnvironmentDbPwd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("environment_db_pwd");

                    b.Property<string>("EnvironmentDbUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("environment_db_user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsUp")
                        .HasColumnType("boolean")
                        .HasColumnName("is_up");

                    b.Property<Guid>("PortId")
                        .HasColumnType("uuid")
                        .HasColumnName("port_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<TimeOnly?>("TimedAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("timed_at");

                    b.HasKey("Id");

                    b.HasIndex("PortId");

                    b.HasIndex("TenantId");

                    b.ToTable("Container_Db", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fb70bc4-3d70-11ef-a3ab-0242ac1c0002"),
                            ContainerDbImage = "postgres:16.2",
                            ContainerDbName = "postgresql_configs",
                            ContainerDbNetwork = "db_tenant_network",
                            ContainerDbPort = "5432",
                            ContainerDbVolume = "db_config_volume",
                            EnvironmentDbName = "AtendimentoConfigDB",
                            EnvironmentDbPwd = "atendimento@config",
                            EnvironmentDbUser = "postgresconfiguser",
                            IsActive = false,
                            IsUp = true,
                            PortId = new Guid("af647e7a-3d74-11ef-a3ab-0242ac1c0002"),
                            TenantId = new Guid("9cf0bfd2-3d70-11ef-a3ab-0242ac1c0002")
                        },
                        new
                        {
                            Id = new Guid("f35a4eae-6eee-49e4-95a0-3df60e6ca9b0"),
                            ContainerDbImage = "postgres:16.2",
                            ContainerDbName = "postgresql_cliente1",
                            ContainerDbNetwork = "cliente1_network",
                            ContainerDbPort = "5434",
                            ContainerDbVolume = "cliente1_volume",
                            EnvironmentDbName = "Cliente1DB",
                            EnvironmentDbPwd = "pwdcliente1",
                            EnvironmentDbUser = "usercliente1",
                            IsActive = false,
                            IsUp = false,
                            PortId = new Guid("f35a4eae-6eee-49e4-95a0-3df60e6ca9b0"),
                            TenantId = new Guid("f6a2372a-b146-45f9-be70-a0be13736dd8")
                        },
                        new
                        {
                            Id = new Guid("62afeccd-c9bb-48b2-a60b-0c5fe2b38694"),
                            ContainerDbImage = "postgres:16.2",
                            ContainerDbName = "postgresql_cliente2",
                            ContainerDbNetwork = "cliente2_network",
                            ContainerDbPort = "5435",
                            ContainerDbVolume = "cliente2_volume",
                            EnvironmentDbName = "Cliente2DB",
                            EnvironmentDbPwd = "pwdcliente2",
                            EnvironmentDbUser = "usercliente2",
                            IsActive = false,
                            IsUp = false,
                            PortId = new Guid("62afeccd-c9bb-48b2-a60b-0c5fe2b38694"),
                            TenantId = new Guid("64210b12-a8d4-44ae-b35e-b13b762c4179")
                        },
                        new
                        {
                            Id = new Guid("39715917-a829-41c4-8da1-64029a0c6364"),
                            ContainerDbImage = "postgres:16.2",
                            ContainerDbName = "postgresql_cliente3",
                            ContainerDbNetwork = "cliente3_network",
                            ContainerDbPort = "5436",
                            ContainerDbVolume = "cliente3_volume",
                            EnvironmentDbName = "Cliente3DB",
                            EnvironmentDbPwd = "pwdcliente3",
                            EnvironmentDbUser = "usercliente3",
                            IsActive = false,
                            IsUp = false,
                            PortId = new Guid("39715917-a829-41c4-8da1-64029a0c6364"),
                            TenantId = new Guid("25ae8570-56b6-4a9d-9616-c15862613525")
                        });
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Feature", (string)null);
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.LogAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<TimeOnly?>("TimedAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("timed_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Log_Access", (string)null);
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Menu", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("af647e7a-3d74-11ef-a3ab-0242ac1c0002"),
                            Description = "Description",
                            IsActive = true,
                            Name = "Containers"
                        },
                        new
                        {
                            Id = new Guid("f35a4eae-6eee-49e4-95a0-3df60e6ca9b0"),
                            Description = "Description",
                            IsActive = true,
                            Name = "Tenants"
                        },
                        new
                        {
                            Id = new Guid("c60de74c-4e13-11ef-9dcf-0242ac1c0002"),
                            Description = "Description",
                            IsActive = true,
                            Name = "Users"
                        },
                        new
                        {
                            Id = new Guid("cfc81d16-4e13-11ef-9dcf-0242ac1c0002"),
                            Description = "Description",
                            IsActive = true,
                            Name = "Ports"
                        },
                        new
                        {
                            Id = new Guid("d8e9b6fc-4e13-11ef-9dcf-0242ac1c0002"),
                            Description = "Description",
                            IsActive = true,
                            Name = "Features"
                        },
                        new
                        {
                            Id = new Guid("e1b05ce6-4e13-11ef-9dcf-0242ac1c0002"),
                            Description = "Description",
                            IsActive = true,
                            Name = "Roles"
                        },
                        new
                        {
                            Id = new Guid("ea280a72-4e13-11ef-9dcf-0242ac1c0002"),
                            Description = "Description",
                            IsActive = true,
                            Name = "User Types"
                        },
                        new
                        {
                            Id = new Guid("f3ff2576-4e13-11ef-9dcf-0242ac1c0002"),
                            Description = "Description",
                            IsActive = true,
                            Name = "User Tokens"
                        },
                        new
                        {
                            Id = new Guid("fc202fe8-4e13-11ef-9dcf-0242ac1c0002"),
                            Description = "Description",
                            IsActive = true,
                            Name = "Logs"
                        },
                        new
                        {
                            Id = new Guid("02b786ee-4e14-11ef-9dcf-0242ac1c0002"),
                            Description = "Description",
                            IsActive = true,
                            Name = "Menu"
                        });
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("PortNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("port_number");

                    b.HasKey("Id");

                    b.ToTable("Port", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("af647e7a-3d74-11ef-a3ab-0242ac1c0002"),
                            IsActive = false,
                            PortNumber = "5432"
                        },
                        new
                        {
                            Id = new Guid("f35a4eae-6eee-49e4-95a0-3df60e6ca9b0"),
                            IsActive = false,
                            PortNumber = "5434"
                        },
                        new
                        {
                            Id = new Guid("62afeccd-c9bb-48b2-a60b-0c5fe2b38694"),
                            IsActive = false,
                            PortNumber = "5435"
                        },
                        new
                        {
                            Id = new Guid("39715917-a829-41c4-8da1-64029a0c6364"),
                            IsActive = false,
                            PortNumber = "5436"
                        });
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = new Guid("6c9b91d0-3ba5-11ef-9476-0242ac130002"),
                            Name = "Operador"
                        },
                        new
                        {
                            Id = new Guid("740cf11e-4e2b-11ef-9dcf-0242ac1c0002"),
                            Name = "Cliente"
                        });
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.RoleMenu", b =>
                {
                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.HasKey("MenuId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Menu", (string)null);

                    b.HasData(
                        new
                        {
                            MenuId = new Guid("af647e7a-3d74-11ef-a3ab-0242ac1c0002"),
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Id = new Guid("47ed36c2-4e15-11ef-9dcf-0242ac1c0002"),
                            IsActive = true
                        },
                        new
                        {
                            MenuId = new Guid("f35a4eae-6eee-49e4-95a0-3df60e6ca9b0"),
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Id = new Guid("67a1a5c0-4e15-11ef-9dcf-0242ac1c0002"),
                            IsActive = true
                        },
                        new
                        {
                            MenuId = new Guid("c60de74c-4e13-11ef-9dcf-0242ac1c0002"),
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Id = new Guid("73ad14e4-4e15-11ef-9dcf-0242ac1c0002"),
                            IsActive = true
                        },
                        new
                        {
                            MenuId = new Guid("cfc81d16-4e13-11ef-9dcf-0242ac1c0002"),
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Id = new Guid("7add512a-4e15-11ef-9dcf-0242ac1c0002"),
                            IsActive = true
                        },
                        new
                        {
                            MenuId = new Guid("d8e9b6fc-4e13-11ef-9dcf-0242ac1c0002"),
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Id = new Guid("83235528-4e15-11ef-9dcf-0242ac1c0002"),
                            IsActive = true
                        },
                        new
                        {
                            MenuId = new Guid("e1b05ce6-4e13-11ef-9dcf-0242ac1c0002"),
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Id = new Guid("8b104688-4e15-11ef-9dcf-0242ac1c0002"),
                            IsActive = true
                        },
                        new
                        {
                            MenuId = new Guid("ea280a72-4e13-11ef-9dcf-0242ac1c0002"),
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Id = new Guid("956dcc4a-4e15-11ef-9dcf-0242ac1c0002"),
                            IsActive = true
                        },
                        new
                        {
                            MenuId = new Guid("f3ff2576-4e13-11ef-9dcf-0242ac1c0002"),
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Id = new Guid("a7dd1c82-4e15-11ef-9dcf-0242ac1c0002"),
                            IsActive = true
                        },
                        new
                        {
                            MenuId = new Guid("fc202fe8-4e13-11ef-9dcf-0242ac1c0002"),
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Id = new Guid("aea5373e-4e15-11ef-9dcf-0242ac1c0002"),
                            IsActive = true
                        },
                        new
                        {
                            MenuId = new Guid("02b786ee-4e14-11ef-9dcf-0242ac1c0002"),
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            Id = new Guid("b5d27120-4e15-11ef-9dcf-0242ac1c0002"),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("connection_string");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<TimeOnly?>("DeactivatedTimedAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("deactivated_timed_at");

                    b.Property<DateOnly?>("DeativatedAt")
                        .HasColumnType("date")
                        .HasColumnName("deactivated_at");

                    b.Property<string>("InitialUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("initial_url");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("secret");

                    b.Property<TimeOnly?>("TimedAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("timed_at");

                    b.HasKey("Id");

                    b.ToTable("Tenant", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cf0bfd2-3d70-11ef-a3ab-0242ac1c0002"),
                            ConnectionString = "Host=localhost;Port=5432;Database=AtendimentoConfigDB;User ID=postgresconfiguser;Password=atendimento@config;Pooling=true;",
                            InitialUrl = "",
                            IsActive = true,
                            Name = "Configuration",
                            Secret = "123"
                        },
                        new
                        {
                            Id = new Guid("f6a2372a-b146-45f9-be70-a0be13736dd8"),
                            ConnectionString = "Host=localhost;Port=5433;Database=Cliente1DB;User ID=usercliente1;Password=pwdcliente1;Pooling=true;",
                            InitialUrl = "",
                            IsActive = true,
                            Name = "Tenant 1",
                            Secret = "123"
                        },
                        new
                        {
                            Id = new Guid("64210b12-a8d4-44ae-b35e-b13b762c4179"),
                            ConnectionString = "Host=localhost;Port=5434;Database=Cliente2DB;User ID=usercliente2;Password=pwdcliente2;Pooling=true;",
                            InitialUrl = "",
                            IsActive = true,
                            Name = "Tenant 2 ",
                            Secret = "123"
                        },
                        new
                        {
                            Id = new Guid("25ae8570-56b6-4a9d-9616-c15862613525"),
                            ConnectionString = "Host=localhost;Port=5435;Database=Cliente3DB;User ID=usercliente3;Password=pwdcliente3;Pooling=true;",
                            InitialUrl = "",
                            IsActive = true,
                            Name = "Tenant 3",
                            Secret = "123"
                        });
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.TokenAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateOnly(2024, 7, 30))
                        .HasColumnName("created_at");

                    b.Property<DateOnly?>("ExpiringAt")
                        .HasColumnType("date")
                        .HasColumnName("expiring_at");

                    b.Property<TimeOnly?>("TimedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("time without time zone")
                        .HasDefaultValue(new TimeOnly(2, 4, 12))
                        .HasColumnName("timed_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("Token_Access", (string)null);
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateOnly?>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("created_at");

                    b.Property<TimeOnly?>("DeactivatedTimedAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("deactivates_timed_at");

                    b.Property<DateOnly?>("DeativatedAt")
                        .HasColumnType("date")
                        .HasColumnName("deactivated_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<TimeOnly?>("TimedAt")
                        .HasColumnType("time without time zone")
                        .HasColumnName("timed_at");

                    b.Property<Guid?>("TokenAccessId")
                        .HasColumnType("uuid")
                        .HasColumnName("token_access_id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("user_email");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TokenAccessId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a150059-614b-47c3-b56f-59deededd8d6"),
                            Email = "marcelo@sys.com",
                            IsActive = true,
                            Name = "Marcelo de Oliveira",
                            Password = "123",
                            RoleId = new Guid("45533ff6-3ba5-11ef-9476-0242ac130002"),
                            TenantId = new Guid("9cf0bfd2-3d70-11ef-a3ab-0242ac1c0002")
                        });
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.UserFeature", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.HasKey("UserId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("User_Feature", (string)null);
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.ContainerDb", b =>
                {
                    b.HasOne("AtendimentoMultiTenant.Core.ManagementArea.Entities.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtendimentoMultiTenant.Core.ManagementArea.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.LogAccess", b =>
                {
                    b.HasOne("AtendimentoMultiTenant.Core.ManagementArea.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.RoleMenu", b =>
                {
                    b.HasOne("AtendimentoMultiTenant.Core.ManagementArea.Entities.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("menu_Id");

                    b.HasOne("AtendimentoMultiTenant.Core.ManagementArea.Entities.Role", "Role")
                        .WithMany("MenuRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_Id");

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.User", b =>
                {
                    b.HasOne("AtendimentoMultiTenant.Core.ManagementArea.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("AtendimentoMultiTenant.Core.ManagementArea.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtendimentoMultiTenant.Core.ManagementArea.Entities.TokenAccess", "TokenAccess")
                        .WithMany()
                        .HasForeignKey("TokenAccessId");

                    b.Navigation("Role");

                    b.Navigation("Tenant");

                    b.Navigation("TokenAccess");
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.UserFeature", b =>
                {
                    b.HasOne("AtendimentoMultiTenant.Core.ManagementArea.Entities.Feature", "Feature")
                        .WithMany("UserFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("feature_id");

                    b.HasOne("AtendimentoMultiTenant.Core.ManagementArea.Entities.User", "User")
                        .WithMany("UserFeatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_id");

                    b.Navigation("Feature");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.Feature", b =>
                {
                    b.Navigation("UserFeatures");
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.Menu", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.Role", b =>
                {
                    b.Navigation("MenuRoles");
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.ManagementArea.Entities.User", b =>
                {
                    b.Navigation("UserFeatures");
                });
#pragma warning restore 612, 618
        }
    }
}
