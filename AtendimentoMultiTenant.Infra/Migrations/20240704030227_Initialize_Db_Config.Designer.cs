// <auto-generated />
using System;
using AtendimentoMultiTenant.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AtendimentoMultiTenant.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240704030227_Initialize_Db_Config")]
    partial class Initialize_Db_Config
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AtendimentoMultiTenant.Core.Entities.ConfigurationEntities.Container", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("ContainerCreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("ContainerImage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ContainerNetwork")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContainerPort")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("ContainerVolume")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EnvironmentDbName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("EnvironmentDbPwd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EnvironmentDbUser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsUp")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Container", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9148b2f-38d2-4e01-81bc-bc3710e8fbab"),
                            ContainerImage = "postgres:16.2",
                            ContainerName = "postgresql_cliente1",
                            ContainerNetwork = "cliente1_network",
                            ContainerPort = "5433",
                            ContainerVolume = "cliente1_volume",
                            EnvironmentDbName = "Cliente1DB",
                            EnvironmentDbPwd = "pwdcliente1",
                            EnvironmentDbUser = "usercliente1",
                            IsUp = false,
                            TenantId = new Guid("f6a2372a-b146-45f9-be70-a0be13736dd8")
                        },
                        new
                        {
                            Id = new Guid("338988dc-bc96-46e9-bdfa-0a5e298ae3cb"),
                            ContainerImage = "postgres:16.2",
                            ContainerName = "postgresql_cliente2",
                            ContainerNetwork = "cliente2_network",
                            ContainerPort = "5434",
                            ContainerVolume = "cliente2_volume",
                            EnvironmentDbName = "Cliente2DB",
                            EnvironmentDbPwd = "pwdcliente2",
                            EnvironmentDbUser = "usercliente2",
                            IsUp = false,
                            TenantId = new Guid("64210b12-a8d4-44ae-b35e-b13b762c4179")
                        },
                        new
                        {
                            Id = new Guid("616a7837-dfcc-4ab8-9f5b-7616556bcee7"),
                            ContainerImage = "postgres:16.2",
                            ContainerName = "postgresql_cliente3",
                            ContainerNetwork = "cliente3_network",
                            ContainerPort = "5435",
                            ContainerVolume = "cliente3_volume",
                            EnvironmentDbName = "Cliente3DB",
                            EnvironmentDbPwd = "pwdcliente3",
                            EnvironmentDbUser = "usercliente3",
                            IsUp = false,
                            TenantId = new Guid("25ae8570-56b6-4a9d-9616-c15862613525")
                        });
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.Entities.ConfigurationEntities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InitialUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("Tenant_Name");

                    b.ToTable("Tenant", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6a2372a-b146-45f9-be70-a0be13736dd8"),
                            ConnectionString = "Host=localhost;Port=5433;Database=Cliente1DB;User ID=usercliente1;Password=pwdcliente1;Pooling=true;",
                            InitialUrl = "",
                            IsActive = true,
                            Name = "Cliente1",
                            Secret = "123"
                        },
                        new
                        {
                            Id = new Guid("64210b12-a8d4-44ae-b35e-b13b762c4179"),
                            ConnectionString = "Host=localhost;Port=5434;Database=Cliente2DB;User ID=usercliente2;Password=pwdcliente2;Pooling=true;",
                            InitialUrl = "",
                            IsActive = true,
                            Name = "Cliente2",
                            Secret = "123"
                        },
                        new
                        {
                            Id = new Guid("25ae8570-56b6-4a9d-9616-c15862613525"),
                            ConnectionString = "Host=localhost;Port=5435;Database=Cliente3DB;User ID=usercliente3;Password=pwdcliente3;Pooling=true;",
                            InitialUrl = "",
                            IsActive = true,
                            Name = "Cliente3",
                            Secret = "123"
                        });
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.Entities.ConfigurationEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("User_Email");

                    b.HasIndex("TenantId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bf06f7b2-6376-4ad6-9ba5-2cee86c3fae3"),
                            Email = "usuario1@teste.com",
                            IsActive = true,
                            Name = "Usuario1",
                            Password = "123",
                            TenantId = new Guid("f6a2372a-b146-45f9-be70-a0be13736dd8")
                        },
                        new
                        {
                            Id = new Guid("a379e99a-826a-43f5-b7eb-5d60d7b67c5f"),
                            Email = "usuario2@teste.com",
                            IsActive = true,
                            Name = "Usuario2",
                            Password = "123",
                            TenantId = new Guid("64210b12-a8d4-44ae-b35e-b13b762c4179")
                        },
                        new
                        {
                            Id = new Guid("1f88bffa-bba7-4c14-8e51-3bfa06322616"),
                            Email = "usuario3@teste.com",
                            IsActive = true,
                            Name = "Usuario3",
                            Password = "123",
                            TenantId = new Guid("25ae8570-56b6-4a9d-9616-c15862613525")
                        });
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.Entities.ConfigurationEntities.Container", b =>
                {
                    b.HasOne("AtendimentoMultiTenant.Core.Entities.ConfigurationEntities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AtendimentoMultiTenant.Core.Entities.ConfigurationEntities.User", b =>
                {
                    b.HasOne("AtendimentoMultiTenant.Core.Entities.ConfigurationEntities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });
#pragma warning restore 612, 618
        }
    }
}
